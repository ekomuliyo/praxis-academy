/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StreamsJavaDriver;

import com.mongodb.connection.ClusterSettings;
import com.mongodb.reactivestreams.client.MongoClient;
import com.mongodb.reactivestreams.client.MongoClients;
import com.mongodb.reactivestreams.client.MongoCollection;
import com.mongodb.reactivestreams.client.MongoDatabase;
import com.mongodb.reactivestreams.client.Success;

// import com.mongodb.MongoClient;
// import com.mongodb.MongoClientURI;
// import com.mongodb.client.MongoCollection;
// import com.mongodb.client.MongoDatabase;

import org.bson.Document;

import StreamsJavaDriver.SubscriberHelper.ObservableSubscriber;


@SuppressWarnings({ "rawtypes", "unchecked" })
public class App {

    public static void main(String[] args) throws Throwable{

        // menggunakan package com.mongodb atau bawaan dari mongodb
        // MongoClient mongoClient = new MongoClient(new MongoClientURI("mongodb://localhost:27017"));
        // MongoDatabase database = mongoClient.getDatabase("users");
        // MongoCollection<Document> collection = database.getCollection("users");
        // Document document = new Document("name", "nama baru");
        // document.put("age", 21);
        // document.put("status", "ready");
        // collection.insertOne(document);

        /*
        * menggunakan library reactive stream, dimana kita dapat melakukan sebuah proses
        * ke database dengan 4 pendekatan ObservableSubscriber dengan mempunyai sub class dibawah
        * OperationSubscriber, PrintSubscriber, PrintDocumentSubscriber 
        */
        // menghubungkan ke server client database, masukan beserta
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        
        // membaca nama database yang ingin dihubungkan
        MongoDatabase database = mongoClient.getDatabase("users");
        // membaca nama collection yang ingin dibutuhkan
        MongoCollection<Document> collection = database.getCollection("users");

        ObservableSubscriber subscriber = new ObservableSubscriber<Success>();
        collection.drop().subscribe(subscriber);
        subscriber.await();
    }
}
