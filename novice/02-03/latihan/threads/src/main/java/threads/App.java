/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package threads;

import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.*;

public class App{

    private static final int nThreads = 10;

    public static void main(String[] args) {

        // List<Thread> threads = new ArrayList<Thread>();

        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);

        for (int i = 0; i < 500; i++) {
            Runnable task = new MyRunnable(1000 + i);
            
            executorService.execute(task);

            // Thread worker = new Thread(task);
            // worker.setName(String.valueOf(i));
            // worker.start();
            // threads.add(worker);
        }

        try {            
            executorService.shutdown();
            executorService.awaitTermination(60, TimeUnit.SECONDS);
            System.out.println("Finished all threads");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // int running = 0;
        // do {
        //     running = 0;
        //     for (Thread thread : threads) {
        //         if (thread.isAlive()) {
        //             running++;
        //             System.out.println("value " + running);
        //         }
        //     }
        //     System.out.println("We have " + running + " running threads");
        // } while (running > 0);
    }
}

class MyRunnable implements Runnable{
    private final long countUntil;

    MyRunnable(long countUntil){
        this.countUntil = countUntil;
    }

    @Override
    public void run() {
        long sum = 0;
        for (long i = 1; i < countUntil; i++) {
            sum += i;
        }
        System.out.println(sum);
    }
}
