/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CompletableFuture;

import java.util.concurrent.*;

public class App {

    public static void main(String[] args) {
        long started = System.currentTimeMillis(); // waktu sekarang dalam satu millisecond
        
        // CompletableFuture<Integer> futureCount = createCompletableFuture();

        // System.out.println("Took " + (started - System.currentTimeMillis()) + " millisecond");

        // try {
        //     int count = futureCount.get();
        //     System.out.println("CompletableFuture took " + (started - System.currentTimeMillis() + " milliseconds"));

        //     System.out.println("Result " + count);
        // } catch (InterruptedException | ExecutionException e) {
        //     e.printStackTrace();
        // }

        System.out.println("Begining of program");

        CompletableFuture<String> data = createCompletableFuture() // generic dari CompletableFuture<TYPE> harus sama type value thenApply() yang terkahir
            .thenApply((Integer count) -> {
                int transformedValue = count * 10;
                System.out.println(transformedValue);
                return transformedValue;
            })
            .thenApply(transformed -> "Finnaly creates a string:");

            try {
                System.out.println(data.get());
            } catch (InterruptedException | ExecutionException e) {}

        System.out.println("end of program");
    }

    // private static CompletableFuture<Integer> createCompletableFuture(){
    //     CompletableFuture<Integer> futureCount = CompletableFuture.supplyAsync(
    //         () -> {
    //             try {
    //                 Thread.sleep(1000);
    //             } catch (InterruptedException e) {}
    //             return 20;
    //         }
    //     );
    //     return futureCount;
    // }

    private static CompletableFuture<Integer> createCompletableFuture(){
        CompletableFuture<Integer> result = CompletableFuture.supplyAsync(
            () -> {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {}
                return 20;
            }
        );
        return result;
    }
}
